generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  password      String
  email         String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  payments      Payment[]
  products      Product[]      @relation("UserProducts")
  subscription  Subscription?
  store         Store?
}

model Store {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  catalogs   Catalog[]
  logoUrl    String?
  brandColor String?
  phone      String?
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?  
  stock       Int        @default(0)
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  catalogItems CatalogItem[]
  user        User       @relation("UserProducts", fields: [userId], references: [id], onDelete: Cascade)
}

model Catalog {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  notes     String?    @db.Text
  storeId   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  store     Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  items     CatalogItem[]
  imageUrl  String?
}

model CatalogItem {
  id          String   @id @default(cuid())
  quantity    Int      @default(1)
  price       Float
  catalogId   String
  productId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  catalog     Catalog  @relation(fields: [catalogId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Payment {
  id             String        @id @default(cuid())
  userId         String
  mercadopagoId  String        @unique
  amount         Float
  currency       String
  status         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
}

model Subscription {
  id                       String    @id @default(cuid())
  userId                   String    @unique
  plan                     String
  planEnds                 DateTime?
  status                   String
  mercadopagoPreapprovalId String?   @unique
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments                 Payment[]
}
